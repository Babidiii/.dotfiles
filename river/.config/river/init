#!/usr/bin/env sh

# This is the example configuration file for river.
#
# If you wish to edit this, you will probably want to copy it to
# $XDG_CONFIG_HOME/river/init or $HOME/.config/river/init first.
#
# See the river(1), riverctl(1), and rivertile(1) man pages for complete
# documentation.

# Note: the "Super" modifier is also known as Logo, GUI, Windows, Mod4, etc.

terminal="st"
filemanager="ranger"
browser="floorp"
mod="Super"

######################################## AUTOSTART
riverctl spawn "wired"
riverctl spawn "swww-daemon"
riverctl spawn "shikane"
riverctl spawn "swww img images/wallpapers/wallhaven-735ope.png"
riverctl spawn "$HOME/.config/waybar/launch.sh"
riverctl spawn "exec pipewire && exec wireplumber"
######################################## Settings

riverctl keyboard-layout -variant us -options caps:escape fr 
riverctl default-layout rivertile
rivertile -view-padding 0 -outer-padding 0 -main-ratio 0.5 -main-count 1 & # riverctl default-layout bsp-layout
# river-bsp-layout --inner-gap 5 --outer-gap 10 --split-perc 0.5 &

# Set background and border color
riverctl background-color 0x002B36
riverctl border-width 1
riverctl border-color-focused 0xbb9af7
riverctl border-color-unfocused 0xc0caf5

# Set keyboard repeat rate
riverctl set-repeat 30 300
riverctl default-attach-mode bottom
riverctl focus-follows-cursor always
riverctl hide-cursor timeout 10000 # 10 Seconds in milliseconds
riverctl hide-cursor when-typing enabled
riverctl set-cursor-warp on-focus-change

######################################## Bind 

# Super+Shift+Return to start an instance of foot (https://codeberg.org/dnkl/foot)
riverctl map normal $mod Return spawn 'st'
riverctl map normal $mod P spawn 'dmenu_run'

riverctl map normal $mod S spawn 'slurp | grim -g - - | wl-copy '

# Super+Q to close the focused view
riverctl map normal Super W close

# Super+Shift+E to exit river
riverctl map normal $mod+Alt Q exit

# Change the focused view with H,J,K,L
riverctl map normal $mod H focus-view left
riverctl map normal $mod J focus-view down
riverctl map normal $mod K focus-view up
riverctl map normal $mod L focus-view right

# Swap the focused view with H,J,K,L
riverctl map normal $mod+Shift H swap left
riverctl map normal $mod+Shift J swap down
riverctl map normal $mod+Shift K swap up
riverctl map normal $mod+Shift L swap right

# Swap the focused output (monitor)
riverctl map normal $mod Tab focus-output next
riverctl map normal $mod Tab focus-output previous

# Send the focused view to the next/previous output (monitor)
riverctl map normal $mod+Shift Period send-to-output next
riverctl map normal $mod+Shift Comma send-to-output previous

# Bump the focused view to the top of the layout stack
riverctl map normal $mod+Shift Return zoom

# Move the focused views with H,J,K,L
riverctl map normal $mod+Alt H move left 100
riverctl map normal $mod+Alt J move down 100
riverctl map normal $mod+Alt K move up 100
riverctl map normal $mod+Alt L move right 100

# Snap views to screen edges
riverctl map normal $mod+Alt+Control H snap left
riverctl map normal $mod+Alt+Control J snap down
riverctl map normal $mod+Alt+Control K snap up
riverctl map normal $mod+Alt+Control L snap right

# Resize views
riverctl map normal $mod+Alt+Shift H resize horizontal -100
riverctl map normal $mod+Alt+Shift J resize vertical 100
riverctl map normal $mod+Alt+Shift K resize vertical -100
riverctl map normal $mod+Alt+Shift L resize horizontal 100

# Super + Left Mouse Button to move views
riverctl map-pointer normal $mod BTN_LEFT move-view
# Super + Right Mouse Button to resize views
riverctl map-pointer normal $mod BTN_RIGHT resize-view
# Super + Middle Mouse Button to toggle float
riverctl map-pointer normal $mod BTN_MIDDLE toggle-float


for i in $(seq 1 9); do
  # Tags are basically workspaces, but different
  tags=$((1 << ("$i" - 1)))
  # Move focus to Tag(Workspace)
  riverctl map normal $mod "$i" set-focused-tags $tags
  # Move view(window) to Tag(Workspace)
  riverctl map normal $mod+Shift "$i" set-view-tags $tags
  # Show view(window) from specified tag on current tag(workspace)
  riverctl map normal $mod+Control "$i" toggle-focused-tags $tags
  # Show focused view(window) on specified tag(workspace)
  riverctl map normal $mod+Shift+Control "$i" toggle-view-tags $tags
done

# Super+0 to focus all tags
# Super+Shift+0 to tag focused view with all tags
all_tags=$(((1 << 32) - 1))
riverctl map normal $mod 0 set-focused-tags $all_tags
riverctl map normal $mod+Shift 0 set-view-tags $all_tags

############################################################################# SCRATCHPAD
# The scratchpad will live on an unused tag. Which tags are used depends on your
# config, but rivers default uses the first 9 tags.
scratch_tag=$((1 << 20 ))
# Toggle the scratchpad with Mod+P
riverctl map normal $mod O toggle-focused-tags ${scratch_tag}

# Send windows to the scratchpad with Super+Shift+P
riverctl map normal $mod I set-view-tags ${scratch_tag}
# Set spawn tagmask to ensure new windows don't have the scratchpad tag unless
# explicitly set.
all_but_scratch_tag=$(( ((1 << 32) - 1) ^ $scratch_tag ))
riverctl spawn-tagmask ${all_but_scratch_tag}


############################################################################# MODE
# Super+Space to toggle float
riverctl map normal $mod T toggle-float

# Super+F to toggle fullscreen
riverctl map normal $mod F toggle-fullscreen

# Declare a passthrough mode. This mode has only a single mapping to return to
# normal mode. This makes it useful for testing a nested wayland compositor
riverctl declare-mode passthrough

# Super+F11 to enter passthrough mode
riverctl map normal $mod F11 enter-mode passthrough

# Super+F11 to return to normal mode
riverctl map passthrough $mod F11 enter-mode normal

# Various media key mapping examples for both normal and locked mode which do
# not have a modifier
for mode in normal locked
do
    # Eject the optical drive (well if you still have one that is)
    # riverctl map $mode None XF86Eject spawn 'eject -T'

    # Control pulse audio volume with pamixer (https://github.com/cdemoulins/pamixer)
    riverctl map $mode None XF86AudioRaiseVolume  spawn 'pamixer -i 5'
    riverctl map $mode None XF86AudioLowerVolume  spawn 'pamixer -d 5'
    riverctl map $mode None XF86AudioMute         spawn 'pamixer --toggle-mute'

    # Control MPRIS aware media players with playerctl (https://github.com/altdesktop/playerctl)
    riverctl map $mode None XF86AudioMedia spawn 'playerctl play-pause'
    riverctl map $mode None XF86AudioPlay  spawn 'playerctl play-pause'
    riverctl map $mode None XF86AudioPrev  spawn 'playerctl previous'
    riverctl map $mode None XF86AudioNext  spawn 'playerctl next'

    # Control screen backlight brightness with brightnessctl (https://github.com/Hummer12007/brightnessctl)
    riverctl map $mode None XF86MonBrightnessUp   spawn 'brightnessctl set +5%'
    riverctl map $mode None XF86MonBrightnessDown spawn 'brightnessctl set 5%-'
done


riverctl map normal $mod+Alt R spawn "$HOME/.config/river/init >/dev/null && notify-send 'River' 'configuration reload'"


############################################################################# RULES

# Make all views with an app-id that starts with "float" and title "foo" start floating.
riverctl rule-add -app-id 'float*' -title 'foo' float

# Make all views with app-id "bar" and any title use client-side decorations
riverctl rule-add -app-id "bar" csd

